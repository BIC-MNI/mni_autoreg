#include <version.h>

/* Possible libraries (set by AC_CHECK_LIB) */

#undef HAVE_LIBSUN
#undef HAVE_LIBC_S
#undef HAVE_LIBUCB

/*
 * Do we have a version of Volume_io more recent than that distributed
 * with MINC 0.3?
 */
#undef HAVE_RECENT_VOLUME_IO

/*
 * This macro is needed for direct access to the 3-D voxel array
 * provided by Volume_io.  *This is a rude, nasty kludge!!*  It is
 * only here for historical reasons, and its presence should *not* 
 * be construed as encouragement for future code to meddle in
 * Volume_io's private affairs!
 * 
 * Also, this is different from the GET_VOXEL_PTR macros provided
 * by Volume_io in a couple of ways:
 *  - the Volume_io macros pay attention to whether the volume
 *    is cached or not, and fail appropriately if so;
 *  - for that reason, they may not be used as lvalues, while
 *    VOXEL_DATA may (which is why it's needed)
 *  - most importantly, the GET_VOXEL_PTR macros follow n levels
 *    of indirection (for an n dimensional volume) and return just
 *    the bare voxel data; VOXEL_DATA returns the highest pointer
 *    in the multidimensional array, allowing full array-like 
 *    operations
 */

#ifdef HAVE_RECENT_VOLUME_IO
# define VOXEL_DATA(vol) ((vol)->array.data)
#else
# define VOXEL_DATA(vol) ((vol)->data)
#endif


/*
 * This macro is needed because Dave changed the calling convention 
 * for format_time(), which Louis uses several times in do_nonlinear.c.
 * AAARRGGHHHH!!!!
 * 
 * Note that it might not always work, depending on how str is
 * declared (ie. we're OK if it's a "char *", but not if it's a 
 * statically allocated "char [n]".  Louis seems to have used 
 * Dave's STRING type, so I expect we'll be OK...      -GPW 1996/06/27
 */

#ifdef HAVE_RECENT_VOLUME_IO
# define FORMAT_TIME(str,format,seconds) \
         (str) = format_time ((format), (seconds))
#else
# define FORMAT_TIME(str,format,seconds) \
         format_time ((str), (format), (seconds))
#endif


/*
 * We do some tricky contortions to make sure that we have DBL_MAX and
 * FLT_MAX available even on non-ANSI systems (ie. Sun).  The
 * decision-making is actually divided between `configure' and `config.h'
 * (this file) as follows:
 * 
 *   - in `configure', we determine if we have float.h (with DBL_MAX) and
 *     if we have values.h (with MAXDOUBLE); if we have values.h but not
 *     float.h, then NEED_VALUES_H is set (this is the case on a Sun
 *     with the native libraries)
 * 
 *   - in config.h (ie. right here), if HAVE_FLOAT_H is set then we
 *     immediately include <float.h>.  If NEED_VALUES_H is set, then we
 *     include <values.h> and define DBL_MAX and FLT_MAX as aliases for
 *     MAXDOUBLE and MAXFLOAT -- thus, in either case it looks as though
 *     we've included an ANSI <float.h>.
 * 
 *   - in the source files (see mincblur/mincblur.c for an example), we
 *     just include <config.h>, and let it take care of arranging for
 *     DBL_MAX and FLT_MAX.
 */

#undef HAVE_FLOAT_H
#undef HAVE_VALUES_H
#undef NEED_VALUES_H

#undef HAVE_EXIT_FAILURE

#include <limits.h>          /* because we want INT_MAX */
#ifdef DBL_MAX
#   undef DBL_MAX             /* this is to take care of SGI's broken
                                 include files. */
#endif
#ifdef FLT_MAX
#   undef FLT_MAX
#endif

#ifdef HAVE_FLOAT_H
# include <float.h>
#endif

#ifdef NEED_VALUES_H
# include <values.h>
# define DBL_MAX MAXDOUBLE
# define FLT_MAX MAXFLOAT
#endif


/* 
 * If M_PI wasn't defined in <math.h>, define it here (this value comes
 * from <math.h> on IRIX, Linux, SunOS, and Solaris -- somehow, I'm 
 * surprised that they're all the same ... ;-)
 */

#undef NEED_PI

#ifdef NEED_PI
# define M_PI 3.14159265358979323846
#endif


/*
 * If EXIT_FAILURE is not defined (NB. we only check <stdlib.h>, because
 * that's where it lives in Linux and IRIX), then we define it here.
 */

#ifndef HAVE_EXIT_FAILURE
# define EXIT_FAILURE 1
#endif
