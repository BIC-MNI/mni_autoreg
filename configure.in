dnl Process this file with autoconf to produce a configure script

AC_INIT(minctracc/Include/minctracc.h)
AM_INIT_AUTOMAKE(mni_autoreg, 0.98h)
AM_CONFIG_HEADER(config.h)

# If prefix is set, use it to set CPPFLAGS and LDFLAGS.
# This helps when probing for libraries, later on, in the common case
# that the 3rd party libraries are also installed in the place where
# this package is going.
#
if test "$prefix" != "NONE"; then
    if test "$CPPFLAGS" = "" -a -d "${prefix}/include"; then
        CPPFLAGS="-I${prefix}/include"
    fi
    if test "$LDFLAGS" = "" -a -d "${prefix}/lib"; then
        LDFLAGS="-L${prefix}/lib"
    fi
fi

#------------------------------------------------------------------------
# Define symbols specifying the package version number,
# compilation user, host, date, and time.
#------------------------------------------------------------------------

# The terminology here is a little icky: what most people think of as
# "host" (ie. the current machine name) is called "machine", because
# "host" is coopted by autoconf's AC_CANONICAL_HOST macro.  It's 
# used to identify the system, e.g. "mips-sgi-irix5.3" -- which *I*
# think should be called "system", so that's what I call it in
# version.h.  Still, kind of ugly.

AC_CANONICAL_HOST
year=`date | awk '{print $NF}'`        # ugh -- SunOS "date" has no %Y
date=`date +%m-%d`

AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_TIME,"`date +%T`",[Configure Time])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_DATE,"$year-$date",[Configure Date])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_USER,"`logname`",[Configure User])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_HOST,"`hostname`",[Configure Host])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_SYSTEM,"$host",[Configure System])



#------------------------------------------------------------------------
# Checks for compiler toolset.
#------------------------------------------------------------------------
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

#------------------------------------------------------------------------
# Look for perl (and make sure it's the right version)
#------------------------------------------------------------------------

if test -z "$PERL"; then
  AC_PATH_PROGS(PERL, [perl5 perl], no)
fi
AC_SUBST(PERL)
if test "$PERL" = no; then
  AC_MSG_WARN(The mritotal script will not run since Perl 5 is not found. 
   You must install Perl 5 before installing MNI AutoReg.)
  PERL=
else
  AC_MSG_CHECKING(Perl version)

  # The perl command will exit with status zero if
  #  (i) $PERL is found, and executable, and
  # (ii) the perl version is NOT < 5.002
  #
  if $PERL -e 'exit ($] < 5.002)'; then
    AC_MSG_RESULT(5.002 or later--good)
  else
    AC_MSG_RESULT(unacceptable)
    AC_MSG_WARN(Perl 5.002 (or greater) is required--you will not be able to run mritotal)
    PERL=
  fi
fi

AM_CONDITIONAL(PERLGOOD, test x$PERL != x)


# -----------------------------------------------------------------
# Check the OS -- if IRIX (SGI), we can use cc and get an ANSI 
# compiler.  Otherwise, the user has to know what they're doing
# in order to override gcc.
# -----------------------------------------------------------------

dnl SMR: removed this, since released automake does not
dnl handle dependency tracking with IRIX cc.
#case "$host_os" in
#  irix*) if test -z "$CC"; then CC=cc; fi ;;
#esac


# -----------------------------------------------------------------
# Look for the C compiler (default gcc, except on SGI's), and
# make sure it supports prototypes, void, enum, and signed char
# properly (can't trust __STDC__).
# -----------------------------------------------------------------

cc_flagged=`echo "$CC $CFLAGS $CPPFLAGS" |sed 's/ +/ /;s/ *$//'`
AC_MSG_CHECKING(that \"$cc_flagged\" has enough ANSI in it)
AC_CACHE_VAL(autoreg_cv_cc_ansi, [
AC_TRY_COMPILE([
typedef enum { RED, GREEN, BLUE, YELLOW, BLACK } colour;
], [
signed char signed_char_name;

void *foo (colour C);
colour a = GREEN;
 
foo (a);
], autoreg_cv_cc_ansi=yes, autoreg_cv_cc_ansi=no)])
CC_ANSI=$autoreg_cv_cc_ansi
AC_MSG_RESULT($CC_ANSI)
 
if test $CC_ANSI = no; then
  AC_MSG_CHECKING(for alternative C compiler)
  AC_CHECK_PROGS(ALTCC, acc gcc, none)
  if test $ALTCC = none; then
    AC_MSG_ERROR(An ANSI-compliant C compiler is required to build the 
                 MNI AutoReg package)
  else
    CC=$ALTCC
  fi
fi

#------------------------------------------------------------------------
# Check that we have some required header files (and macros in them)
#------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(float.h limits.h malloc.h)

# We need to know extreme values for various data types
# On POSIX systems, these are defined in <float.h> (floats, doubles,
# and long doubles) and in <limits.h> for integer types.
#
# Some older systems might have similar macros defined in
# <values.h>, so we check for that, too.
#
if test $ac_cv_header_limits_h = no \
     -o $ac_cv_header_float_h = no; then
	AC_CHECK_HEADER(values.h, , 
			AC_MSG_ERROR(either limits.h or values.h is required.))
fi


#------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
#------------------------------------------------------------------------
AC_C_INLINE
AC_C_CONST
AC_TYPE_SIZE_T

#------------------------------------------------------------------------
# Checks for libraries.
#------------------------------------------------------------------------
AC_CHECK_LIB(c, xdr_long,:,AC_CHECK_LIB(sun, xdr_long))
AC_CHECK_LIB(c_s, main)
AC_CHECK_LIB(ucb, random)

smr_CHECK_LIB(netcdf,,
[NetCDF library], ncopen, netcdf.h)
if test "$netcdf_LIBS" = ""; then
    AC_MSG_ERROR([Required library NetCDF not found!])
fi

smr_CHECK_LIB(minc,,
[MNI medical image library], miicv_create, minc.h, 
$netcdf_LIBS, $netcdf_CFLAGS)
if test "$minc_LIBS" = ""; then
    AC_MSG_ERROR([Required library minc not found!])
fi

smr_CHECK_LIB(volumeio,volume_io,
[MNI Volume IO library], input_volume, volume_io.h,
[$netcdf_LIBS $minc_LIBS -lm],[$netcdf_CFLAGS $minc_CFLAGS])
if test "$volumeio_LIBS" = ""; then
    AC_MSG_ERROR([Required library volume_io not found!])
fi

INCLUDEDIRS="$volumeio_CFLAGS $minc_CFLAGS $netcdf_CFLAGS"
LIBDIRS="$volumeio_LIBS $minc_LIBS $netcdf_LIBS"

AC_SUBST(INCLUDEDIRS)
AC_SUBST(LIBDIRS)

#------------------------------------------------------------------------
# See if we have the latest version of Volume_io (based on RCS id 
# in volume_io.h)
#------------------------------------------------------------------------

AC_MSG_CHECKING(revision of volume_io.h)
save_CPPFLAGS="$CPPFLAGS"
save_LIBS="$LIBS"
CPPFLAGS="$CPPFLAGS $INCLUDEDIRS"
LIBS="$LIBS $LIBDIRS -lvolume_io -lminc -lnetcdf -lm"

dnl This bit of magic was borrowed from XEmacs via FVWM.
dnl If the program compiles and runs, we run again with a dummy argument
dnl that outputs the RCSID revision number.
AC_TRY_RUN([
    #include <string.h>
    #include <volume_io.h>
    int main(int c, char **v) {
	char* s = strstr(volume_io_rcsid,"volume_io.h,v ");
	char* t;
	if ( s == NULL ) return 1;
	s += 14;
	t = strchr(s,' ');
	if ( t == NULL ) return 2;
	*t = 0;
	if ( c > 1 ) printf("%s\n", s);
	return 0;
    }],
    [vio_ver=`./conftest dummy_arg`],
    [AC_MSG_RESULT(unknown)
     AC_MSG_ERROR([Ancient version of Volume_io; please upgrade.])])

CPPFLAGS="$save_CPPFLAGS"
LIBS="$save_LIBS"

if test x$vio_ver = x; then
    AC_MSG_RESULT(unknown)
    AC_MSG_WARN([you seem to have an ancient version of Volume_io; if you have problems compiling, please upgrade])
else
    AC_MSG_RESULT($vio_ver)
    case $vio_ver in
    	1.[[1-5]]) AC_MSG_WARN([you have an old version of Volume_io; if you have problems compiling, please upgrade]) ;;
    	1.6) AC_MSG_RESULT([you have the version distributed with MINC 0.3 -- no problem!]) ;;
    	*) AC_MSG_RESULT([you have an up-to-date version -- excellent!]) ;
           AC_DEFINE(HAVE_RECENT_VOLUME_IO,1,
                [Volume_io version is more recent than that distributed with MINC 0.3]) ;;
    esac
fi


#------------------------------------------------------------------------
# Checks for library functions.
#------------------------------------------------------------------------
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(strtod strtol)


AC_OUTPUT(Makefile
Proglib/Makefile
make_phantom/Makefile
mincbbox/Makefile
mincblur/Makefile
minctracc/Makefile
minctracc/Files/Makefile
minctracc/Main/Makefile
minctracc/Numerical/Makefile
minctracc/Optimize/Makefile
minctracc/Volume/Makefile
minctracc/Extra_progs/Makefile
perl/Makefile
Testing/Makefile
)
