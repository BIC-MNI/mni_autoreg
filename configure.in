dnl Process this file with autoconf to produce a configure script

AC_INIT(minctracc/Include/minctracc.h)
AM_INIT_AUTOMAKE(mni_autoreg, 0.98i)
AM_CONFIG_HEADER(config.h)

#------------------------------------------------------------------------
# Define symbols specifying the package version number,
# compilation user, host, date, and time.
#------------------------------------------------------------------------

# The terminology here is a little icky: what most people think of as
# "host" (ie. the current machine name) is called "machine", because
# "host" is coopted by autoconf's AC_CANONICAL_HOST macro.  It's 
# used to identify the system, e.g. "mips-sgi-irix5.3" -- which *I*
# think should be called "system", so that's what I call it in
# version.h.  Still, kind of ugly.

AC_CANONICAL_HOST
year=`date | awk '{print $NF}'`        # ugh -- SunOS "date" has no %Y
date=`date +%m-%d`

AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_TIME,"`date +%T`",[Configure Time])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_DATE,"$year-$date",[Configure Date])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_USER,"`logname`",[Configure User])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_HOST,"`hostname`",[Configure Host])
AC_DEFINE_UNQUOTED(MNI_AUTOREG_COMPILE_SYSTEM,"$host",[Configure System])



#------------------------------------------------------------------------
# Checks for compiler toolset.
#------------------------------------------------------------------------
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB

#------------------------------------------------------------------------
# Look for perl (and make sure it's the right version)
#------------------------------------------------------------------------

AC_PATH_PROGS(PERL, [perl5 perl], no)

if test "$PERL" = no; then
    AC_MSG_WARN(The mritotal script will not run since Perl 5 is not found.
                You must install Perl 5 before installing MNI AutoReg.)
    PERL=
else
    AC_MSG_CHECKING(Perl version)

    # The perl command will exit with status zero if
    #  (i) $PERL is found, and executable, and
    # (ii) the perl version is NOT < 5.002
    #
    if $PERL -e 'exit ($] < 5.002)'; then
	AC_MSG_RESULT(5.002 or later--good)
    else
	AC_MSG_RESULT(unacceptable)
	AC_MSG_WARN(Perl 5.002 (or greater) is required--you will not be able to run mritotal)
	PERL=
    fi
fi

AM_CONDITIONAL(PERLGOOD, test x$PERL != x)


# -----------------------------------------------------------------
# Check the OS -- if IRIX (SGI), we can use cc and get an ANSI 
# compiler.  Otherwise, the user has to know what they're doing
# in order to override gcc.
# -----------------------------------------------------------------

dnl SMR: removed this, since released automake does not
dnl handle dependency tracking with IRIX cc.
#case "$host_os" in
#  irix*) if test -z "$CC"; then CC=cc; fi ;;
#esac


# -----------------------------------------------------------------
# Look for the C compiler (default gcc, except on SGI's), and
# make sure it supports prototypes, void, enum, and signed char
# properly (can't trust __STDC__).
# -----------------------------------------------------------------

cc_flagged=`echo "$CC $CFLAGS $CPPFLAGS" |sed 's/ +/ /;s/ *$//'`
AC_MSG_CHECKING(that \"$cc_flagged\" has enough ANSI in it)
AC_CACHE_VAL(autoreg_cv_cc_ansi, [
AC_TRY_COMPILE([
typedef enum { RED, GREEN, BLUE, YELLOW, BLACK } colour;
], [
signed char signed_char_name;

void *foo (colour C);
colour a = GREEN;
 
foo (a);
], autoreg_cv_cc_ansi=yes, autoreg_cv_cc_ansi=no)])
CC_ANSI=$autoreg_cv_cc_ansi
AC_MSG_RESULT($CC_ANSI)
 
if test $CC_ANSI = no; then
    AC_MSG_CHECKING(for alternative C compiler)
    AC_CHECK_PROGS(ALTCC, acc gcc, none)
    if test $ALTCC = none; then
	AC_MSG_ERROR(An ANSI-compliant C compiler is required to build the 
		     MNI AutoReg package)
    else
	CC=$ALTCC
    fi
fi

#------------------------------------------------------------------------
# Check that we have some required header files (and macros in them)
#------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(float.h limits.h malloc.h math.h stdlib.h)

# We need to know extreme values for various data types
# On POSIX systems, these are defined in <float.h> (floats, doubles,
# and long doubles) and in <limits.h> for integer types.
#
# Some older systems might have similar macros defined in
# <values.h>, so we check for that, too.
#
if test $ac_cv_header_limits_h = no \
     -o $ac_cv_header_float_h = no; then
	AC_CHECK_HEADER(values.h, , 
			AC_MSG_ERROR(either limits.h or values.h is required.))
fi


#------------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
#------------------------------------------------------------------------
AC_C_INLINE
AC_C_CONST
AC_TYPE_SIZE_T

#------------------------------------------------------------------------
# Checks for standard library functions.
#------------------------------------------------------------------------
AC_CHECK_FUNCS(strtod strtol vprintf,
	:, AC_ERROR(Required library function not found))


#------------------------------------------------------------------------
# Checks for libraries.
#------------------------------------------------------------------------

# 2000-02-19 - smr
# - these libraries look like cruft
#   must find out just exactly why these are needed...
# - xdr_long, for instance is not used in any code here
# - using libucb is often just asking for trouble
#
dnl AC_CHECK_LIB(c, xdr_long,:,AC_CHECK_LIB(sun, xdr_long))
dnl AC_CHECK_LIB(c_s, main)
dnl AC_CHECK_LIB(ucb, random)

# We'll need to look for a slew of third-party libraries: NetCDF,
# and MNI libraries minc, and volume_io.
#
# These are often installed into /usr/local/{include,lib}, 
# or ${prefix}/{include,lib}, so we'll add these to the search paths
# for the C preprocessor and the linker.
#
if test x$GCC != xyes; then
    mni_dirs=/usr/local
else
    # GCC will search in /usr/local by default
    mni_dirs=
fi
if test x$prefix != xNONE -a x$prefix != x/usr/local; then
    mni_dirs="$prefix $mni_dirs"
fi

for d in $mni_dirs; do
    test -d $d/include && MNI_CPPFLAGS="$MNI_CPPFLAGS -I$d/include"
    test -d $d/include/volume_io && MNI_CPPFLAGS="$MNI_CPPFLAGS -I$d/include/volume_io"
    test -d $d/lib && MNI_LDFLAGS="$MNI_LDFLAGS -L$d/lib"
done

smr_CHECK_LIB(netcdf,, [NetCDF library], ncopen, netcdf.h, 
$MNI_LDFLAGS, $MNI_CPPFLAGS)
if test "$netcdf_LIBS" = ""; then
    AC_MSG_ERROR([Required library NetCDF not found!])
fi
MNI_LIBS=$netcdf_LIBS
MNI_INCLUDES=$netcdf_CFLAGS

smr_CHECK_LIB(minc,, [MNI medical image library], miicv_create, minc.h, 
[$MNI_LDFLAGS $MNI_LIBS], [$MNI_INCLUDES $MNI_CPPFLAGS])
if test "$minc_LIBS" = ""; then
    AC_MSG_ERROR([Required library minc not found!])
fi
MNI_LIBS="$minc_LIBS $MNI_LIBS"
MNI_INCLUDES="$minc_CFLAGS $MNI_INCLUDES"

smr_CHECK_LIB(volumeio, volume_io, [MNI Volume IO library], input_volume, volume_io.h,
[$MNI_LDFLAGS $MNI_LIBS -lm],[$MNI_INCLUDES $MNI_CPPFLAGS])
if test "$volumeio_LIBS" = ""; then
    AC_MSG_ERROR([Required library volume_io not found!])
fi
MNI_LIBS="$MNI_LDFLAGS $volumeio_LIBS $MNI_LIBS"
MNI_INCLUDES="$volumeio_CFLAGS $MNI_INCLUDES $MNI_CPPFLAGS"

AC_SUBST(MNI_LIBS)
AC_SUBST(MNI_INCLUDES)

#------------------------------------------------------------------------
# Check some oddities of the volume IO library.
#------------------------------------------------------------------------

save_CPPFLAGS="${CPPFLAGS-unset}"
CPPFLAGS="$CPPFLAGS $MNI_INCLUDES"

old_volumeio=

# Test if volume data structure has array.data member (CURRNENT), 
# or just data member (OLD).
AC_MSG_CHECKING(how to access raw array of a volume)
autoreg_test="volume->array.data"
AC_TRY_COMPILE( [#include <volume_io.h>], 
		[Volume v; v->array.data = NULL;],
		AC_DEFINE(VOLIO_HAVE_VOLUME_ARRAY_DATA, 1, [Volume data stored in array.data]),
		autoreg_test=fail )

if test $autoreg_test = "fail"; then
    old_volumeio=yes
    autoreg_test="volume->data"
    AC_TRY_COMPILE( [#include <volume_io.h>], 
		    [Volume v; v->data = NULL;],
		    AC_DEFINE(VOLIO_HAVE_VOLUME_DATA, 1, [Volume data stored in data]),
		    autoreg_test=fail )
fi

AC_MSG_RESULT($autoreg_test)
if test $autoreg_test = "fail"; then
    AC_MSG_ERROR(Cannot determine how to access raw data in a volume.)
fi


# Test if format_time is called as
#   string = format_time( format, time )   CURRENT
# or
#   format_time( string, format, time )    OLD
#
autoreg_test="2"
AC_MSG_CHECKING(number of arguments of format_time)
AC_TRY_COMPILE( [#include <volume_io.h>], 
		[STRING s = format_time( "%g %s", 0 );],
		AC_DEFINE( VOLIO_HAVE_2ARG_FORMAT_TIME, 1, [format_time takes 2 arguments] ),
		autoreg_test=fail )

if test $autoreg_test = "fail"; then
    old_volumeio=yes
    autoreg_test="3"
    AC_TRY_COMPILE( [#include <volume_io.h>], 
		    [STRING s; format_time( s, "%g %s", 0 );],
		    AC_DEFINE( VOLIO_HAVE_3ARG_FORMAT_TIME, 1, [format_time takes 3 arguments] ),
		    autoreg_test=fail )
fi

AC_MSG_RESULT($autoreg_test)
if test $autoreg_test = "fail"; then
    AC_MSG_ERROR(Cannot determine arguments to format_time.)
fi

# Test if delete_dimension_names takes two arguments (CURRENT),
# or one (OLD).
#
autoreg_test="2"
AC_MSG_CHECKING(number of arguments of delete_dimension_names)
AC_TRY_COMPILE( [#include <volume_io.h>], 
		[Volume v; char** names; delete_dimension_names(v,names);],
		AC_DEFINE( VOLIO_HAVE_2ARG_DELETE_DIMENSION_NAMES, 1, [function takes 2 arguments] ),
		autoreg_test=fail )

if test $autoreg_test = "fail"; then
    old_volumeio=yes
    autoreg_test="1"
    AC_TRY_COMPILE( [#include <volume_io.h>], 
		    [Volume v; char** names; delete_dimension_names(v,names);],
		    AC_DEFINE( VOLIO_HAVE_1ARG_DELETE_DIMENSION_NAMES, 1, [function takes 1 argument] ),
		    autoreg_test=fail )
fi

AC_MSG_RESULT($autoreg_test)
if test $autoreg_test = "fail"; then
    AC_MSG_ERROR(Cannot determine arguments to delete_dimension_names.)
fi

if test x$save_CPPFLAGS = xunset; then
    unset CPPFLAGS
else
    CPPFLAGS="$save_CPPFLAGS"
fi

if test x$old_volumeio = xyes; then
    AC_MSG_WARN([you seem to have an ancient version of Volume_io; please upgrade])
fi


AC_OUTPUT(make_model
Makefile
Proglib/Makefile
make_phantom/Makefile
mincbbox/Makefile
mincblur/Makefile
mincchamfer/Makefile
minctracc/Makefile
minctracc/Files/Makefile
minctracc/Main/Makefile
minctracc/Numerical/Makefile
minctracc/Optimize/Makefile
minctracc/Volume/Makefile
minctracc/Extra_progs/Makefile
perl/Makefile
Testing/Makefile
)
